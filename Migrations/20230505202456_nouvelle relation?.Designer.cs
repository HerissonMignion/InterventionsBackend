// <auto-generated />
using System;
using InterventionsBackend.DbContexts;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace InterventionsBackend.Migrations
{
    [DbContext(typeof(InterventionsDbContext))]
    [Migration("20230505202456_nouvelle relation?")]
    partial class nouvellerelation
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("InterventionsBackend.Entities.Probleme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("courriel")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("courrielConfirmation")
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.Property<DateTime>("dateProbleme")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("descriptionProbleme")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("varchar(500)");

                    b.Property<int>("noTypeProbleme")
                        .HasColumnType("int");

                    b.Property<string>("noUnite")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("nom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("notification")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("prenom")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("telephone")
                        .HasMaxLength(10)
                        .HasColumnType("varchar(10)");

                    b.HasKey("Id");

                    b.HasIndex("noTypeProbleme");

                    b.ToTable("Problemes");
                });

            modelBuilder.Entity("InterventionsBackend.Entities.TypeProbleme", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("TypesProbleme");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Name = "Problème d'écran"
                        },
                        new
                        {
                            Id = 2,
                            Name = "Problème avec le disque dur"
                        },
                        new
                        {
                            Id = 3,
                            Name = "Problème de connexion réseau"
                        },
                        new
                        {
                            Id = 4,
                            Name = "Problème avec la souris"
                        },
                        new
                        {
                            Id = 5,
                            Name = "Problème de clavier"
                        },
                        new
                        {
                            Id = 6,
                            Name = "Problème d'ouverture du logiciel Ms-Word"
                        },
                        new
                        {
                            Id = 7,
                            Name = "Problème d'ouverture du logiciel Ms-Excel"
                        },
                        new
                        {
                            Id = 8,
                            Name = "Problème d'imprimante"
                        },
                        new
                        {
                            Id = 9,
                            Name = "Problème entre la chaise et le clavier..."
                        },
                        new
                        {
                            Id = 10,
                            Name = "Autre"
                        });
                });

            modelBuilder.Entity("InterventionsBackend.Entities.Probleme", b =>
                {
                    b.HasOne("InterventionsBackend.Entities.TypeProbleme", "TypeProbleme")
                        .WithMany("Problemes")
                        .HasForeignKey("noTypeProbleme")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("TypeProbleme");
                });

            modelBuilder.Entity("InterventionsBackend.Entities.TypeProbleme", b =>
                {
                    b.Navigation("Problemes");
                });
#pragma warning restore 612, 618
        }
    }
}
